* 第3章 シェル関数、組み込みコマンド
** 3.1 シェル関数
関数名を定義し、コマンド処理を定義するだけで、シェル関数を定義できる。
: function_name(){
:   command1
:   command2
: }
定義した関数は、そのシェル内で有効になる。

関数の戻値は、「関数の中で最後に実行されたコマンドの実行終了ステータス」。
変えたい場合は
: return backnumber
とすれば、指定した値が戻値となる。


シェルスクリプトの中のコマンドは、そのシェルスクリプトの元で操作される。
これはシェルスクリプトを起動したシェルとは異なる。

*** シェルの移動とか
: function_name
と呼びだすだけだと、そのシェルスクリプトの元で処理される。

リダイレクションをつかう場合はサブシェルを開いて、そこで処理される。

*** 引数(位置バラメタ)に関する注意
シェルスクリプトを1つつくると、そこにある変数は1つのテーブルにまとめられる。
変数がかぶらないように、頭に「_」をつけるなどの工夫を。

*** シェルスクリプト内の関数をカレントシェルで実行するには
: . script
というように、実行ファイルノ前に「. 」を入れる。

** 組込みコマンド
: man sh
で利用しているシェルのマニュアルが見れる。
*** ヌルコマンド(:)
真を返すコマンド。
なにもしたくないときや、あるパラメタだけの判定をしたいときに使う。
1.なにもしたくないとき
: if return_bool
: then
:   :
: else
:   command
: fi

2.あるパラメタだけの判定
: if : return_bool
: then
:   ...
: fi
return_boolが真だと真になりifがとおり、return_boolが偽だと偽になる。

*** ドットコマンド 指定されたファイルを現在のシェルで読み込む
ファイルの指定がなければ、PATHにあるディレクトリのファイルから探してくる
*** break
*** cd +directory
*** continue
*** echo
*** eval +str
*** exec +command
現行のシェルプロセスを置き換え、引数のコマンドを実行させる。
もとのシェルに戻らない。
*** exit
*** export +variable
指定した変数を、それ以降に起動された他のコマンド、シェルから利用できるようになる。
*** pwd
*** read +variable
キーボードからの入力をvariableに格納する。
*** readonly
*** return
*** set
+と-で、オプションをonにしたりoffにしたり。
オプション一覧
| -I | ^DによりEOFを無視                              |
| -i | 対話的に動作                                   |
| -n | コマンドを読み取りのみ、実行しない             |
| -s | コマンドを標準入力から読むん                   |
| -v | 入力されたコマンドを標準エラーに出力           |
| -x | コマンド実行前に、コマンドを標準エラーに▼出力 |

また、位置バラメタに値をセットできる。
: set a b c d
: echo $1 $2 $3 #=> a b c
*** shift
*** test +
条件を判定し、真偽値を返す。
オプションは
: man test
で確認できる。
*** trap +action +signal ..
catchのように、指定したシグナルを受け取ると、
actionを実行する。
*** type
シェル内での取り扱いかを知る。
*** umask +mask
作成するファイルの権限を、「777 - $mask」にして作成する。
(r -4, w- 2, x - 1)
*** unset
指定した変数関数を消去
*** wait PROCESSID
PROCESSIDに指定したプロセスが終わるまで待つ。
