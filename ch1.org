* 基本的な説明
** 1 シェルスクリプトをつくる際の基本事項
1行目に 「#! /bin/sh」を書く。

 #!に続くコマンドが読み込まれるので、まずはbshellで動くことを宣言

実行権限(x)をつける
: chmod +x file

** コメント
: # ここはコメント
: ls -l # コマンドは実行される。

** ファイル名の補完
: * # 文字列すべて
: ? # 1文字
: .* # 隠しファイル
: .? # 2文字の隠しファイル
: [xxx] #[]内にふくまれている中のどれか1文字
: [a-zA-Z] # こんなんもできる
: [!xxx] #[]内にふくまれていない、どれか1文字
これらの組み合わせでファイル名を補完できる。
隠しファイルは、頭に「.」をつけなければ認識されない。(検索から除外される)

たとえば以下のコマンドでは隠しファイルに適用されない。
: [.a]

** クォーテーション \, '', ""
文字として扱うときにつかう。
渡す引数の個数を変化させたくない場合などにつかう。
ex)
: STR =
: test "$STR" = "some chars"
上の場合だと、STRが空でも、
: test "" = "some chars"
となり、エラーが起こらない。

*** \ (エスケープキャラクタ)
*** ' ' (シングルクォート) すべてエスケープ
すべての特殊文字を、文字としてあつかえる。
*** " " (ダブル) 特定の特殊文字は使用可能
\ , $ , ` は、エスケープしない。
** バッククォート(` `) コマンド置換
: echo "Today is `date`"
この場合、dateコマンドの実行結果が代入される。
** コマンドステータス true(0), false(!0)
直前のコマンドの結果は、「$?」にはいっている。
0だとtrue、0以外だとfalseとなる。

** コマンドセパレータ ;, |, &, ||, &&
*** ; セミコロン 改行せずに1行で

*** | パイプ コマンドの結果を処理
: func1 | func2
func1の実行結果が、 func2の入力となって処理される。
: func1 > tmp
: func2 < tmp
と同じ処理。

*** & バックグラウンドで処理を実行
: func1 &
とすると、func1の実行がバックグラウンドで行われる。
並行して操作できるということ。


*** || OR演算子
: func1 || func2
func1が失敗(false)だったときに、func2が実行される。
いままでに学習したプログラムとすこし違う。
: rm file || echo "Cant rm file"
このようにもつかえる。
: if func1 || func2 ;then
:   echo "true"
: fi
*** && AND演算子
: func1 || func2
func1が成功したときに func2が実行される


** グルーピング
*** () 新しいシェルでコマンドを実行
新しいシェルは、現在の環境を引き継いでいる。

*** {} かっこ内をまとめて実行
: { func1;func2 }
: {
:   func1
:   func2
: }
のようにして実行。コマンドの結果をまとめたいときにつかう。

** 制御文 if, for, while, case

*** if
: if commands1; then
:    truefunc
: elif commands2; then
:   eltruefunc
: else
:    otherfunc
: fi
のようにつかう。
*** for
: for value in ab cd ef
: do
:   echo $1
: done
のようにつかう。適用する部分はスペースで区切る。
break, continueなどで制御可能。

*** while
: while test &a -lt 3
: do echo $a
:    a=`expr $a + 1`
: done
whileの条件が、0(true)の間はくりかえす。
*** case
: STR=abc
: case "$STR" in
:   ABC) echo "str = ABC" ;;
:   abc) echo "str = abc" ;;
: esac
** testコマンド 条件を判定
: test someexp
someexpが正しいばあいに、0を返す
: [ someexp ]
という糖衣構文もある
